name: CI

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

permissions: {}

jobs:
  ci:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Shellcheck
        run: |
          # Run shellcheck on the action script
          shellcheck "script.sh" --shell=dash

  zizmor:
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run zizmor
        uses: zizmorcore/zizmor-action@f52a838cfabf134edcbaa7c8b3677dde20045018 # v0.1.1
        with:
          persona: pedantic

  test:
    runs-on: ubuntu-24.04

    # Required for OpenID Connect token retrieval
    permissions:
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Start mock crates.io server
        run: |
          # Build the mock server before running it so that
          # `cargo run` finds the binary and we can run it in the background
          manifest_path="--manifest-path=mock/Cargo.toml"
          cargo build $manifest_path
          cargo run   $manifest_path &

          # Wait for server to be ready
          retry_count=0
          max_retries=3
          until curl -s http://localhost:3000/health > /dev/null 2>&1; do
            echo "Waiting for mock server to start... (attempt $((retry_count + 1))/$max_retries)"
            sleep 2
            retry_count=$((retry_count + 1))
            if [ $retry_count -ge $max_retries ]; then
              echo "Mock server failed to start after $max_retries attempts"
              exit 1
            fi
          done
          echo "Mock server is ready"

      - name: Run trusted publishing action
        id: trusted-publishing
        uses: ./ # Uses the action in the root directory
        with:
          url: "http://localhost:3000" # Mock server url

      - name: Assert action output
        env:
          TOKEN: ${{ steps.trusted-publishing.outputs.token }}
        run: |
          if [ "$TOKEN" != "mock-token" ]; then
            echo "Expected token to be 'mock-token', but got '$TOKEN'"
            exit 1
          fi
          echo "Token assertion passed. Token value: $TOKEN"
